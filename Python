## #**Python Programming**

```python
print("This is a new file")

# create your own function 
def greeting(name, friend):
  print("Hello World " + name + " We are going to meet " + friend)

# call function
greeting("Tern!", "Khoon!")

**# fstring template**
name = "Tern"
friend = "Khoon"

result = f"{name} is going to meet {friend} for lunch."
print(result)
```

print("Hello World " + name + " We are going to meet " + friend)

print(f"{name} is going to meet {friend} for lunch.”)

```python
# create your own function 
# default argument 
def greeting(name="Izing", friend="Custard"):
  print(f"{name} is going to meet {friend} for lunch.")

# call function
greeting()
```

```python
# greeting updated V2
def greeting_name():
    username = input("What is your name: ")
    message = f"Hi! {username}, what can I do for you today?"
    print(message)

greeting_name()
```

```python
# double number
# int float str bool
def fdouble():
    num = int(input("Give me one whole number: "))
    print(num * 2)
  
fdouble()
```

```python
# function that is made for string => METHODS
text = "a duck walks into a bar"

print(text.upper())

print(text.replace("duck","cat"))

print(text.capitalize())
print("custard".capitalize())

print(text.split(" "))

#ใช้ fstring ดีกว่า
name = "tern"
friend = "khoon"
text2 = "{} is going to have lunch with {}".format(name, friend)

print(text2)
```

```python
# bool (booleans)
print(int(False) + 1) #false 0
print(int(True) + 1) #true 1

a = 10 
b = 15
c = 20
d = 25

print(a > b and c < d)

print(10 == 5 or 6 > 2)
```

```python
# list []
shoppings_list = ["egg", "milk", "bread",
                 "tissue", "salmon", "wine"]

# print(shoppings_list[0])...[1][2]..
# DRY (Don't Repeat Yourself)

for item in shoppings_list:
    if (item == "milk" or item == "wine"):
        print("liquid")
    else:
        print(item)
```

```python
#.pop() #remove item
fruits.pop()
print(fruits)

#.remove()
fruits.remove("banana")
print(fruits)
```

```python
#fav_books
fav_books = ["Sputnik Sweetheart", "The Great Gatsby", "The Hobbit", "The Lord of the Rings"]

fav_books.append("Kafka on the Shore")

fav_books.insert(0, "1Q84")

fav_books.sort()
fav_books.sort(reverse=True)

print(fav_books)
```

```python
#python type hint
name: str = "Tern"
gpa: float = 3.60
age: int = 20
movie_lover: bool = True

print(name,gpa,age,movie_lover)
```

```python
## tuple unpacking
age_friends = (20,5,5)

Tern, Custard, Izing = age_friends

print(Tern, Custard, Izing)

##
def create_books():
  return ("BMS", "MMS", "coach builder", "Freak")

b1, b2, _, b4 = create_books()

print(b1, b2, b4)
```

```python
## def new function that returns more than one value
def add_two_nums(x, y):
  return x+y

## test function
result = add_two_nums(10, 15)

print(result)
```

```python
customer01 = {
    "name": "tern",
    "age": 20,
    "city": "Bangkok"
}

# dict is mutable object
customer01["name"] = "Custard"
customer01["age"] = 5

# add new key
customer01["country"] = "Thailand"

customer01["name"]
customer01.get("name") #ใช้แบบนี้ดีกว่าเพราะถ้าไม่เจอค่าจะไม่ขึ้น error
```

```python
customer01.keys()
customer01.values()
customer01.items() #list tuple

for item in customer01.items():
  print(item) #[0], [1]
```

```python
## set in Python is unique
# set is use to DELETE Duplicate
numbers = [1,1,2,3,4,5,5,6,9,9]

set(numbers)
```

```python
set_a = {"banana", "apple"}
set_b = {"banana", "orange"}

# union (ตัวที่ไม่ซ้ำกัน)
set_a | set_b

# intersect (ตัวที่ซ้ำกัน)
set_a & set_b
```

```python
# if else function
def grading(score):
  if score >= 80:
    return("A")
  elif score >= 70:
    return("B")
  elif score >=60:
    return("C")
  else:
    return("Failed")

grade = grading(85)
print(grade)
```

```python
# for loop
artists = ["DPR Ian", 
           "iu",
           "jhope"]

for artist in artists:
  print(artist.split(" ")[0].upper())

#in other ways 
artists = ["DPR Ian", 
           "iu",
           "jhope"]

#list comprehension
upper_artists = [a.upper() for a in artists]
print(upper_artists)
```

```python
# for loop
artists = ["DPR Ian", 
           "iu",
           "jhope"]

for artist in artists:
  first_name = artist.split(" ")[0].upper()
  if first_name == "DPR":
      print("Greeeed!")
  else:
    print(first_name)
```

```python
# cost of program: time 
nums = list(range(1,11)) # n-1
print(nums)
```

```python
#แบบนี้มันช้า 
def sum_manual(nums):
  result = 0
  for num in nums:
      result += num
  return result

sum_manual(nums)

#แบบนี้ไวกว่า เพราะไม่ต้องใส่ loop
	#(ต้น+ปลาย)*ปลาย /2
def sum_shortcut(nums):
    return (nums[0] + nums[-1]) * nums[-1] /2

sum_shortcut(nums)
```

```python
## while loop
n = 1 #counter 

while n < 5:
  print("hi!")
  n += 1. #ตัวเบรกลูป terminate ออก #update counter variable
```

```python
def game():
  print("This is a test game!")
  while True:
    user_input = input("Do you want to continue or stop? ")
    if user_input == "stop":
      print("Game stop!")
      break
    else:
      print("Let's continue")
```

## **#Essential Python for Data Analyst**

### OOP

```python
## Object Oriented Programming 
class Book: 
    def __init__(self, name, year, author):
        self.name = name
        self.year = year
        self.author = author

book1 = Book("Think like a freak", 2010, "Dubner")
book2 = Book("Business Made Simple", 2018, "Donald Miller")
book3 = Book("Data Science for Business", 2015, "Wiley")

# dot notation
book3.name
```

```python
from random import randint

class ATM:
    def __init__(self, account_name, bank_name, initial):
        self.account_name = account_name
        self.bank_name = bank_name 
        self.balance = initial
    
    # string representation
    def __str__(self):
        return f"This is an account of {self.account_name}, bank: {self.bank_name}"

    # method => function
    def check_balance(self):
        print(f"Balance: {self.balance}")

    def deposit(self, money):
        self.balance += money
        print(f"Deposit successfully: your new balance: {self.balance} THB ")

    def withdraw(self, money):
        self.balance -= money
        print(f"Withdraw successfully: your new balance: {self.balance} THB ")

    def get_OTP(self):
        otp = randint(1000, 9999)
        print(f"Your OTP: {otp} This OTP will be available in the next 2 minutes")

```

```python
# create an instance from ATM class
acc1 = ATM("tern", "scb", 500)

print(acc1)
acc1.check_balance()
acc1.deposit(1000)
acc1.withdraw(200)
acc1.get_OTP()
```

### Try Except Box

```python
try: 
    number/0
except ZeroDivisionError:
    print("cannot divide by zero")
except NameError:
    print("variable not defined")
else:
    print("done")
finally:
    print("complete!")
```

### Context Manager

```python
# write csv using csv module 
import csv

col_names = ["food_id", "food", "price"]

data = [
    [1, "pizza", 200],
    [2, "french fried", 50],
    [3, "coke", 10]
]

with open("food.csv", "w") as file: 
    writer = csv.writer(file)
    writer.writerow(col_names)
    writer.writerows(data)

!cat food.csv
```

```python
## JSON = dictation in python

import json

with open("data.json") as file:
    result = json.load(file)

print(result)

from json import load, dump

with open("tern.json", "w") as file:
      json.dump(result, file, indent=6)
      print("successfully dump a new json file. ")

!cat tern.json
```

### API

```python
# import module
from requests import get

url = "https://swapi.dev/api/people/1/"

response = get(url)

# 200 ok
print(response.status_code)

#see data that get back from server
print( response.json()["name"])

```

```python
from requests import get
from time import sleep

url = "https://swapi.dev/api/people/"

for i in range(5):
    index = i + 1 
    new_url = url + str(index)
    resp = get(new_url)
    print(resp.json()["name"])
    sleep(2)

#homework API: name and height
for i in range(5):
    index = i + 1 
    new_url = url + str(index)
    resp = get(new_url) .json()
    name = resp["name"]  
    height = resp["height"]
    print(name, height)
    sleep(2)
```

### Numpy & Pandas

- numerical python
- pandas dataframe

```python
import numpy as np
import pandas as pd

nums = [1, 20, 25, 30, 100] #R vector c(10, 20,25, 30, 100)

# numpy array
arr_nums = np.array(nums)

#function (*)
print(
    np.sum(arr_nums),
    np.mean(arr_nums),
    np.median(arr_nums),
    np.min(arr_nums),
    np.max(arr_nums),
    np.std(arr_nums)
)

#method
arr_nums.sum()
```

```python
# vector R
m1= np.array([
    [1,2],
    [3,4]
])
# broadcasting
m1 + 100
# element wise computation
m1 + m1

np.arange(1, 101, 1)
np.linspace(1, 101, 5)
np.zeros((2,2))
```

```python
# matrix dot notation (nultiply)
m1 = np.array([
    [1,2],
    [3,4]
])

m2 = np.array([
    [5,5],
    [3,2]
])

np.dot(m1, m2) #อันนี้เซฟกว่า
m1.dot(m2) 
```

```python
import pandas as pd

# create dataframe from scratch
#"keys": ["value.."]
data = {
    "id": [1, 2, 3],
    "name": ["tern", "custard", "izing"],
    "city": ["BKK", "JPN", "LON"]
}

df = pd.DataFrame(data)

df["age"] = [20, 35, 35]
df.drop("age", axis="columns")  #or axis=1 same as "columns"

df
```

```python
# read csv file from pandas

df = pd.read_csv("store.csv")

df.head()

df.columns # attribute
df.info() #method
```

```python
# query() => filter rows with conditions
# clean dataframe column names

col_names = list(df.columns)

for name in col_names:
    print(name.lower().replace(" ", "_"))
```

```python
# query() => filter rows with conditions
# clean dataframe column names

col_names = list(df.columns)

#list comprehension
clean_col_names = [name.lower().replace(" ", "_").replace("-", "_")
                  for name in col_names]

print(clean_col_names)

df.columns = clean_col_names  # mutable object

df.head()
```

```python
# data transformation (R dplyr)

df2 = df[["customer_id", "customer_name"]].head(5)

#python
df3 = df[ df["customer_name"] == "Claire Gute" ][["order_date", "customer_id", "customer_name"]]
df3
#R
df %>% 
		select(order_date, customer_id, customer_name) %>%
		filter(customer_name == "Clair Gute")
```

```python
# query() => filter rows with conditions 
df.query(" city == 'Los Angeles' and category == 'Furniture' ")[["customer_name", "segment", "city"]]
```

```python
# aggregate data

df.groupby(["segment", "region"])[["sales", "profit"]].sum()
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/62b764cd-f8a9-4508-9e84-f8c548f32db1/9b9f2772-c01a-49f2-ba3d-bdcd72b013d6/Untitled.png)

```python
# aggregate data

df.groupby(["segment", "region"])[["sales", "profit"]].agg(['sum', 'mean'])
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/62b764cd-f8a9-4508-9e84-f8c548f32db1/70e7a652-e7e9-4175-9a25-c3c6d0dfae4f/Untitled.png)

```python
# export to csv
# use \ to enter 

res = df.query("region" == 'West'")\
			.groupby(["segment", "region"])[["sales", "profit"]]\
      .agg(['sum', 'mean'])\
      .reset_index()

print(res)

res.to_csv("agg_data.csv")
```

### Load data from SQL

```python
import sqlite3
import pandas as pd

# create connection
con = sqlite3.connect("chinook.db")
```

```python
cust = pd.read_sql("select * from customers where country ='USA'", con)

cust
```

```python
con.close()
```

### Sklearn Foundation

Model: linear regression
